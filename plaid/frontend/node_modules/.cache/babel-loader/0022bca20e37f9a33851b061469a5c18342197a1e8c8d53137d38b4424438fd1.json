{"ast":null,"code":"const formatCurrency = (number, code) => {\n  if (number != null && number !== undefined) {\n    return ` ${parseFloat(number.toFixed(2)).toLocaleString(\"en\")} ${code}`;\n  }\n  return \"no data\";\n};\nexport const authCategories = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Balance\",\n  field: \"balance\"\n}, {\n  title: \"Account #\",\n  field: \"account\"\n}, {\n  title: \"Routing #\",\n  field: \"routing\"\n}];\nexport const transactionsCategories = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Amount\",\n  field: \"amount\"\n}, {\n  title: \"Date\",\n  field: \"date\"\n}];\nexport const identityCategories = [{\n  title: \"Names\",\n  field: \"names\"\n}, {\n  title: \"Emails\",\n  field: \"emails\"\n}, {\n  title: \"Phone numbers\",\n  field: \"phoneNumbers\"\n}, {\n  title: \"Addresses\",\n  field: \"addresses\"\n}];\nexport const balanceCategories = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Balance\",\n  field: \"balance\"\n}, {\n  title: \"Subtype\",\n  field: \"subtype\"\n}, {\n  title: \"Mask\",\n  field: \"mask\"\n}];\nexport const investmentsCategories = [{\n  title: \"Account Mask\",\n  field: \"mask\"\n}, {\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Quantity\",\n  field: \"quantity\"\n}, {\n  title: \"Close Price\",\n  field: \"price\"\n}, {\n  title: \"Value\",\n  field: \"value\"\n}];\nexport const investmentsTransactionsCategories = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Amount\",\n  field: \"amount\"\n}, {\n  title: \"Date\",\n  field: \"date\"\n}];\nexport const liabilitiesCategories = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Type\",\n  field: \"type\"\n}, {\n  title: \"Last Payment Date\",\n  field: \"date\"\n}, {\n  title: \"Last Payment Amount\",\n  field: \"amount\"\n}];\nexport const itemCategories = [{\n  title: \"Institution Name\",\n  field: \"name\"\n}, {\n  title: \"Billed Products\",\n  field: \"billed\"\n}, {\n  title: \"Available Products\",\n  field: \"available\"\n}];\nexport const accountsCategories = [{\n  title: \"Name\",\n  field: \"name\"\n}, {\n  title: \"Balance\",\n  field: \"balance\"\n}, {\n  title: \"Subtype\",\n  field: \"subtype\"\n}, {\n  title: \"Mask\",\n  field: \"mask\"\n}];\nexport const paymentCategories = [{\n  title: \"Payment ID\",\n  field: \"paymentId\"\n}, {\n  title: \"Amount\",\n  field: \"amount\"\n}, {\n  title: \"Status\",\n  field: \"status\"\n}, {\n  title: \"Status Update\",\n  field: \"statusUpdate\"\n}, {\n  title: \"Recipient ID\",\n  field: \"recipientId\"\n}];\nexport const assetsCategories = [{\n  title: \"Account\",\n  field: \"account\"\n}, {\n  title: \"Transactions\",\n  field: \"transactions\"\n}, {\n  title: \"Balance\",\n  field: \"balance\"\n}, {\n  title: \"Days Available\",\n  field: \"daysAvailable\"\n}];\nexport const transferCategories = [{\n  title: \"Transfer ID\",\n  field: \"transferId\"\n}, {\n  title: \"Amount\",\n  field: \"amount\"\n}, {\n  title: \"Type\",\n  field: \"type\"\n}, {\n  title: \"ACH Class\",\n  field: \"achClass\"\n}, {\n  title: \"Network\",\n  field: \"network\"\n}, {\n  title: \"Status\",\n  field: \"status\"\n}];\nexport const incomePaystubsCategories = [{\n  title: \"Description\",\n  field: \"description\"\n}, {\n  title: \"Current Amount\",\n  field: \"currentAmount\"\n}, {\n  title: \"Currency\",\n  field: \"currency\"\n}];\nexport const transformAuthData = data => {\n  return data.numbers.ach.map(achNumbers => {\n    const account = data.accounts.filter(a => {\n      return a.account_id === achNumbers.account_id;\n    })[0];\n    const balance = account.balances.available || account.balances.current;\n    const obj = {\n      name: account.name,\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\n      account: achNumbers.account,\n      routing: achNumbers.routing\n    };\n    return obj;\n  });\n};\nexport const transformTransactionsData = data => {\n  return data.latest_transactions.map(t => {\n    const item = {\n      name: t.name,\n      amount: formatCurrency(t.amount, t.iso_currency_code),\n      date: t.date\n    };\n    return item;\n  });\n};\nexport const transformIdentityData = data => {\n  const final = [];\n  const identityData = data.identity[0];\n  identityData.owners.forEach(owner => {\n    const names = owner.names.map(name => {\n      return name;\n    });\n    const emails = owner.emails.map(email => {\n      return email.data;\n    });\n    const phones = owner.phone_numbers.map(phone => {\n      return phone.data;\n    });\n    const addresses = owner.addresses.map(address => {\n      return `${address.data.street} ${address.data.city}, ${address.data.region} ${address.data.postal_code}`;\n    });\n    const num = Math.max(emails.length, names.length, phones.length, addresses.length);\n    for (let i = 0; i < num; i++) {\n      const obj = {\n        names: names[i] || \"\",\n        emails: emails[i] || \"\",\n        phoneNumbers: phones[i] || \"\",\n        addresses: addresses[i] || \"\"\n      };\n      final.push(obj);\n    }\n  });\n  return final;\n};\nexport const transformBalanceData = data => {\n  const balanceData = data.accounts;\n  return balanceData.map(account => {\n    const balance = account.balances.available || account.balances.current;\n    const obj = {\n      name: account.name,\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\n      subtype: account.subtype,\n      mask: account.mask\n    };\n    return obj;\n  });\n};\nexport const transformInvestmentsData = data => {\n  const holdingsData = data.holdings.holdings.sort(function (a, b) {\n    if (a.account_id > b.account_id) return 1;\n    return -1;\n  });\n  return holdingsData.map(holding => {\n    const account = data.holdings.accounts.filter(acc => acc.account_id === holding.account_id)[0];\n    const security = data.holdings.securities.filter(sec => sec.security_id === holding.security_id)[0];\n    const value = holding.quantity * security.close_price;\n    const obj = {\n      mask: account.mask,\n      name: security.name,\n      quantity: formatCurrency(holding.quantity, \"\"),\n      price: formatCurrency(security.close_price, account.balances.iso_currency_code),\n      value: formatCurrency(value, account.balances.iso_currency_code)\n    };\n    return obj;\n  });\n};\nexport const transformInvestmentTransactionsData = data => {\n  const investmentTransactionsData = data.investments_transactions.investment_transactions.sort(function (a, b) {\n    if (a.account_id > b.account_id) return 1;\n    return -1;\n  });\n  return investmentTransactionsData.map(investmentTransaction => {\n    const security = data.investments_transactions.securities.filter(sec => sec.security_id === investmentTransaction.security_id)[0];\n    const obj = {\n      name: security.name,\n      amount: investmentTransaction.amount,\n      date: investmentTransaction.date\n    };\n    return obj;\n  });\n};\nexport const transformLiabilitiesData = data => {\n  var _liabilitiesData$mort, _liabilitiesData$stud;\n  const liabilitiesData = data.liabilities.liabilities;\n  //console.log(liabilitiesData)\n  //console.log(\"random\")\n  const credit = liabilitiesData.credit.map(credit => {\n    var _credit$last_payment_;\n    const account = data.liabilities.accounts.filter(acc => acc.account_id === credit.account_id)[0];\n    const obj = {\n      name: account.name,\n      type: \"credit card\",\n      date: (_credit$last_payment_ = credit.last_payment_date) !== null && _credit$last_payment_ !== void 0 ? _credit$last_payment_ : \"\",\n      amount: formatCurrency(credit.last_payment_amount, account.balances.iso_currency_code)\n    };\n    return obj;\n  });\n  const mortgages = (_liabilitiesData$mort = liabilitiesData.mortgage) === null || _liabilitiesData$mort === void 0 ? void 0 : _liabilitiesData$mort.map(mortgage => {\n    const account = data.liabilities.accounts.filter(acc => acc.account_id === mortgage.account_id)[0];\n    const obj = {\n      name: account.name,\n      type: \"mortgage\",\n      date: mortgage.last_payment_date,\n      amount: formatCurrency(mortgage.last_payment_amount, account.balances.iso_currency_code)\n    };\n    return obj;\n  });\n  const student = (_liabilitiesData$stud = liabilitiesData.student) === null || _liabilitiesData$stud === void 0 ? void 0 : _liabilitiesData$stud.map(student => {\n    const account = data.liabilities.accounts.filter(acc => acc.account_id === student.account_id)[0];\n    const obj = {\n      name: account.name,\n      type: \"student loan\",\n      date: student.last_payment_date,\n      amount: formatCurrency(student.last_payment_amount, account.balances.iso_currency_code)\n    };\n    return obj;\n  });\n  return credit.concat(mortgages).concat(student);\n};\nexport const transformTransferData = data => {\n  const transferData = data.transfer;\n  return [{\n    transferId: transferData.id,\n    amount: transferData.amount,\n    type: transferData.type,\n    achClass: transferData.ach_class,\n    network: transferData.network,\n    status: transferData.status\n  }];\n};\nexport const transformItemData = data => {\n  return [{\n    name: data.institution.name,\n    billed: data.item.billed_products.join(\", \"),\n    available: data.item.available_products.join(\", \")\n  }];\n};\nexport const transformAccountsData = data => {\n  const accountsData = data.accounts;\n  return accountsData.map(account => {\n    const balance = account.balances.available || account.balances.current;\n    const obj = {\n      name: account.name,\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\n      subtype: account.subtype,\n      mask: account.mask\n    };\n    return obj;\n  });\n};\nexport const transformPaymentData = data => {\n  const statusUpdate = typeof data.payment.last_status_update === \"string\" ? data.payment.last_status_update.replace(\"T\", \" \").replace(\"Z\", \"\") : new Date(data.payment.last_status_update * 1000) // Java data comes as timestamp\n  .toISOString().replace(\"T\", \" \").replace(\"Z\", \"\");\n  return [{\n    paymentId: data.payment.payment_id,\n    amount: `${data.payment.amount.currency} ${data.payment.amount.value}`,\n    status: data.payment.status,\n    statusUpdate: statusUpdate,\n    recipientId: data.payment.recipient_id\n  }];\n};\nexport const transformAssetsData = data => {\n  const assetItems = data.json.items;\n  return assetItems.flatMap(item => {\n    return item.accounts.map(account => {\n      const balance = account.balances.available || account.balances.current;\n      const obj = {\n        account: account.name,\n        balance: formatCurrency(balance, account.balances.iso_currency_code),\n        transactions: account.transactions.length,\n        daysAvailable: account.days_available\n      };\n      return obj;\n    });\n  });\n};\nexport const transformIncomePaystubsData = data => {\n  const paystubsItemsArray = data.paystubs.paystubs;\n  var finalArray = [];\n  for (var i = 0; i < paystubsItemsArray.length; i++) {\n    var ActualEarningVariable = paystubsItemsArray[i].earnings;\n    for (var j = 0; j < ActualEarningVariable.breakdown.length; j++) {\n      var payStubItem = {\n        description: paystubsItemsArray[i].employer.name + '_' + ActualEarningVariable.breakdown[j].description,\n        currentAmount: ActualEarningVariable.breakdown[j].current_amount,\n        currency: ActualEarningVariable.breakdown[j].iso_currency_code\n      };\n      finalArray.push(payStubItem);\n    }\n  }\n  return finalArray;\n};","map":{"version":3,"names":["formatCurrency","number","code","undefined","parseFloat","toFixed","toLocaleString","authCategories","title","field","transactionsCategories","identityCategories","balanceCategories","investmentsCategories","investmentsTransactionsCategories","liabilitiesCategories","itemCategories","accountsCategories","paymentCategories","assetsCategories","transferCategories","incomePaystubsCategories","transformAuthData","data","numbers","ach","map","achNumbers","account","accounts","filter","a","account_id","balance","balances","available","current","obj","name","iso_currency_code","routing","transformTransactionsData","latest_transactions","t","item","amount","date","transformIdentityData","final","identityData","identity","owners","forEach","owner","names","emails","email","phones","phone_numbers","phone","addresses","address","street","city","region","postal_code","num","Math","max","length","i","phoneNumbers","push","transformBalanceData","balanceData","subtype","mask","transformInvestmentsData","holdingsData","holdings","sort","b","holding","acc","security","securities","sec","security_id","value","quantity","close_price","price","transformInvestmentTransactionsData","investmentTransactionsData","investments_transactions","investment_transactions","investmentTransaction","transformLiabilitiesData","liabilitiesData","liabilities","credit","type","last_payment_date","last_payment_amount","mortgages","mortgage","student","concat","transformTransferData","transferData","transfer","transferId","id","achClass","ach_class","network","status","transformItemData","institution","billed","billed_products","join","available_products","transformAccountsData","accountsData","transformPaymentData","statusUpdate","payment","last_status_update","replace","Date","toISOString","paymentId","payment_id","currency","recipientId","recipient_id","transformAssetsData","assetItems","json","items","flatMap","transactions","daysAvailable","days_available","transformIncomePaystubsData","paystubsItemsArray","paystubs","finalArray","ActualEarningVariable","earnings","j","breakdown","payStubItem","description","employer","currentAmount","current_amount"],"sources":["C:/Users/russk/OneDrive/Documents/Wealth-Wise/plaid/frontend/src/dataUtilities.ts"],"sourcesContent":["import {\r\n  AuthGetResponse,\r\n  Transaction,\r\n  IdentityGetResponse,\r\n  InvestmentsHoldingsGetResponse,\r\n  InvestmentsTransactionsGetResponse,\r\n  AccountsGetResponse,\r\n  ItemGetResponse,\r\n  InstitutionsGetByIdResponse,\r\n  LiabilitiesGetResponse,\r\n  PaymentInitiationPaymentGetResponse,\r\n  AssetReportGetResponse,\r\n  AssetReport,\r\n  TransferGetResponse,\r\n  IncomeVerificationPaystubsGetResponse,\r\n  Paystub,\r\n  Earnings,\r\n} from \"plaid/dist/api\";\r\n\r\nconst formatCurrency = (\r\n  number: number | null | undefined,\r\n  code: string | null | undefined\r\n) => {\r\n  if (number != null && number !== undefined) {\r\n    return ` ${parseFloat(number.toFixed(2)).toLocaleString(\"en\")} ${code}`;\r\n  }\r\n  return \"no data\";\r\n};\r\n\r\nexport interface Categories {\r\n  title: string;\r\n  field: string;\r\n}\r\n\r\n//interfaces for categories in each individual product\r\ninterface AuthDataItem {\r\n  routing: string;\r\n  account: string;\r\n  balance: string;\r\n  name: string;\r\n}\r\ninterface TransactionsDataItem {\r\n  amount: string;\r\n  date: string;\r\n  name: string;\r\n}\r\n\r\ninterface IdentityDataItem {\r\n  addresses: string;\r\n  phoneNumbers: string;\r\n  emails: string;\r\n  names: string;\r\n}\r\n\r\ninterface BalanceDataItem {\r\n  balance: string;\r\n  subtype: string | null;\r\n  mask: string;\r\n  name: string;\r\n}\r\n\r\ninterface InvestmentsDataItem {\r\n  mask: string;\r\n  quantity: string;\r\n  price: string;\r\n  value: string;\r\n  name: string;\r\n}\r\n\r\ninterface InvestmentsTransactionItem {\r\n  amount: number;\r\n  date: string;\r\n  name: string;\r\n}\r\n\r\ninterface LiabilitiessDataItem {\r\n  amount: string;\r\n  date: string;\r\n  name: string;\r\n  type: string;\r\n}\r\n\r\ninterface PaymentDataItem {\r\n  paymentId: string;\r\n  amount: string;\r\n  status: string;\r\n  statusUpdate: string;\r\n  recipientId: string;\r\n}\r\ninterface ItemDataItem {\r\n  billed: string;\r\n  available: string;\r\n  name: string;\r\n}\r\n\r\ninterface AssetsDataItem {\r\n  account: string;\r\n  balance: string;\r\n  transactions: number;\r\n  daysAvailable: number;\r\n}\r\n\r\ninterface TransferDataItem {\r\n  transferId: string;\r\n  amount: string;\r\n  type: string;\r\n  achClass: string;\r\n  network: string;\r\n}\r\n\r\ninterface IncomePaystubsDataItem {\r\n  description: string;\r\n  currentAmount: number | null;\r\n  currency: number | null;\r\n}\r\n\r\nexport interface ErrorDataItem {\r\n  error_type: string;\r\n  error_code: string;\r\n  error_message: string;\r\n  display_message: string | null;\r\n  status_code: number | null;\r\n}\r\n\r\n//all possible product data interfaces\r\nexport type DataItem =\r\n  | AuthDataItem\r\n  | TransactionsDataItem\r\n  | IdentityDataItem\r\n  | BalanceDataItem\r\n  | InvestmentsDataItem\r\n  | InvestmentsTransactionItem\r\n  | LiabilitiessDataItem\r\n  | ItemDataItem\r\n  | PaymentDataItem\r\n  | AssetsDataItem\r\n  | TransferDataItem\r\n  | IncomePaystubsDataItem;\r\n\r\nexport type Data = Array<DataItem>;\r\n\r\nexport const authCategories: Array<Categories> = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Balance\",\r\n    field: \"balance\",\r\n  },\r\n  {\r\n    title: \"Account #\",\r\n    field: \"account\",\r\n  },\r\n  {\r\n    title: \"Routing #\",\r\n    field: \"routing\",\r\n  },\r\n];\r\n\r\nexport const transactionsCategories: Array<Categories> = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    field: \"amount\",\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n  },\r\n];\r\n\r\nexport const identityCategories: Array<Categories> = [\r\n  {\r\n    title: \"Names\",\r\n    field: \"names\",\r\n  },\r\n  {\r\n    title: \"Emails\",\r\n    field: \"emails\",\r\n  },\r\n  {\r\n    title: \"Phone numbers\",\r\n    field: \"phoneNumbers\",\r\n  },\r\n  {\r\n    title: \"Addresses\",\r\n    field: \"addresses\",\r\n  },\r\n];\r\n\r\nexport const balanceCategories: Array<Categories> = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Balance\",\r\n    field: \"balance\",\r\n  },\r\n  {\r\n    title: \"Subtype\",\r\n    field: \"subtype\",\r\n  },\r\n  {\r\n    title: \"Mask\",\r\n    field: \"mask\",\r\n  },\r\n];\r\n\r\nexport const investmentsCategories: Array<Categories> = [\r\n  {\r\n    title: \"Account Mask\",\r\n    field: \"mask\",\r\n  },\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Quantity\",\r\n    field: \"quantity\",\r\n  },\r\n  {\r\n    title: \"Close Price\",\r\n    field: \"price\",\r\n  },\r\n  {\r\n    title: \"Value\",\r\n    field: \"value\",\r\n  },\r\n];\r\n\r\nexport const investmentsTransactionsCategories: Array<Categories> = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    field: \"amount\",\r\n  },\r\n  {\r\n    title: \"Date\",\r\n    field: \"date\",\r\n  },\r\n];\r\n\r\nexport const liabilitiesCategories: Array<Categories> = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    field: \"type\",\r\n  },\r\n  {\r\n    title: \"Last Payment Date\",\r\n    field: \"date\",\r\n  },\r\n  {\r\n    title: \"Last Payment Amount\",\r\n    field: \"amount\",\r\n  },\r\n];\r\n\r\nexport const itemCategories: Array<Categories> = [\r\n  {\r\n    title: \"Institution Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Billed Products\",\r\n    field: \"billed\",\r\n  },\r\n  {\r\n    title: \"Available Products\",\r\n    field: \"available\",\r\n  },\r\n];\r\n\r\nexport const accountsCategories: Array<Categories> = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n  },\r\n  {\r\n    title: \"Balance\",\r\n    field: \"balance\",\r\n  },\r\n  {\r\n    title: \"Subtype\",\r\n    field: \"subtype\",\r\n  },\r\n  {\r\n    title: \"Mask\",\r\n    field: \"mask\",\r\n  },\r\n];\r\n\r\nexport const paymentCategories: Array<Categories> = [\r\n  {\r\n    title: \"Payment ID\",\r\n    field: \"paymentId\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    field: \"amount\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n  },\r\n  {\r\n    title: \"Status Update\",\r\n    field: \"statusUpdate\",\r\n  },\r\n  {\r\n    title: \"Recipient ID\",\r\n    field: \"recipientId\",\r\n  },\r\n];\r\n\r\nexport const assetsCategories: Array<Categories> = [\r\n  {\r\n    title: \"Account\",\r\n    field: \"account\",\r\n  },\r\n  {\r\n    title: \"Transactions\",\r\n    field: \"transactions\",\r\n  },\r\n  {\r\n    title: \"Balance\",\r\n    field: \"balance\",\r\n  },\r\n  {\r\n    title: \"Days Available\",\r\n    field: \"daysAvailable\",\r\n  },\r\n];\r\n\r\nexport const transferCategories: Array<Categories> = [\r\n  {\r\n    title: \"Transfer ID\",\r\n    field: \"transferId\",\r\n  },\r\n  {\r\n    title: \"Amount\",\r\n    field: \"amount\",\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    field: \"type\",\r\n  },\r\n  {\r\n    title: \"ACH Class\",\r\n    field: \"achClass\",\r\n  },\r\n  {\r\n    title: \"Network\",\r\n    field: \"network\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n  },\r\n];\r\n\r\nexport const incomePaystubsCategories: Array<Categories> = [\r\n  {\r\n    title: \"Description\",\r\n    field: \"description\",\r\n  },\r\n  {\r\n    title: \"Current Amount\",\r\n    field: \"currentAmount\",\r\n  },\r\n  {\r\n    title: \"Currency\",\r\n    field: \"currency\",\r\n  }\r\n]\r\n\r\nexport const transformAuthData = (data: AuthGetResponse) => {\r\n  return data.numbers.ach!.map((achNumbers) => {\r\n    const account = data.accounts!.filter((a) => {\r\n      return a.account_id === achNumbers.account_id;\r\n    })[0];\r\n    const balance: number | null | undefined =\r\n      account.balances.available || account.balances.current;\r\n    const obj: DataItem = {\r\n      name: account.name,\r\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\r\n      account: achNumbers.account!,\r\n      routing: achNumbers.routing!,\r\n    };\r\n    return obj;\r\n  });\r\n};\r\n\r\nexport const transformTransactionsData = (\r\n  data: {latest_transactions: Transaction[]}\r\n): Array<DataItem> => {\r\n  return data.latest_transactions!.map((t) => {\r\n    const item: DataItem = {\r\n      name: t.name!,\r\n      amount: formatCurrency(t.amount!, t.iso_currency_code),\r\n      date: t.date,\r\n    };\r\n    return item;\r\n  });\r\n};\r\n\r\ninterface IdentityData {\r\n  identity: IdentityGetResponse[\"accounts\"];\r\n}\r\n\r\nexport const transformIdentityData = (data: IdentityData) => {\r\n  const final: Array<DataItem> = [];\r\n  const identityData = data.identity![0];\r\n  identityData.owners.forEach((owner) => {\r\n    const names = owner.names.map((name) => {\r\n      return name;\r\n    });\r\n    const emails = owner.emails.map((email) => {\r\n      return email.data;\r\n    });\r\n    const phones = owner.phone_numbers.map((phone) => {\r\n      return phone.data;\r\n    });\r\n    const addresses = owner.addresses.map((address) => {\r\n      return `${address.data.street} ${address.data.city}, ${address.data.region} ${address.data.postal_code}`;\r\n    });\r\n\r\n    const num = Math.max(\r\n      emails.length,\r\n      names.length,\r\n      phones.length,\r\n      addresses.length\r\n    );\r\n\r\n    for (let i = 0; i < num; i++) {\r\n      const obj = {\r\n        names: names[i] || \"\",\r\n        emails: emails[i] || \"\",\r\n        phoneNumbers: phones[i] || \"\",\r\n        addresses: addresses[i] || \"\",\r\n      };\r\n      final.push(obj);\r\n    }\r\n  });\r\n\r\n  return final;\r\n};\r\n\r\nexport const transformBalanceData = (data: AccountsGetResponse) => {\r\n  const balanceData = data.accounts;\r\n  return balanceData.map((account) => {\r\n    const balance: number | null | undefined =\r\n      account.balances.available || account.balances.current;\r\n    const obj: DataItem = {\r\n      name: account.name,\r\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\r\n      subtype: account.subtype,\r\n      mask: account.mask!,\r\n    };\r\n    return obj;\r\n  });\r\n};\r\n\r\ninterface InvestmentData {\r\n  error: null;\r\n  holdings: InvestmentsHoldingsGetResponse;\r\n}\r\n\r\nexport const transformInvestmentsData = (data: InvestmentData) => {\r\n  const holdingsData = data.holdings.holdings!.sort(function (a, b) {\r\n    if (a.account_id > b.account_id) return 1;\r\n    return -1;\r\n  });\r\n  return holdingsData.map((holding) => {\r\n    const account = data.holdings.accounts!.filter(\r\n      (acc) => acc.account_id === holding.account_id\r\n    )[0];\r\n    const security = data.holdings.securities!.filter(\r\n      (sec) => sec.security_id === holding.security_id\r\n    )[0];\r\n    const value = holding.quantity * security.close_price!;\r\n\r\n    const obj: DataItem = {\r\n      mask: account.mask!,\r\n      name: security.name!,\r\n      quantity: formatCurrency(holding.quantity, \"\"),\r\n      price: formatCurrency(\r\n        security.close_price!,\r\n        account.balances.iso_currency_code\r\n      ),\r\n      value: formatCurrency(value, account.balances.iso_currency_code),\r\n    };\r\n    return obj;\r\n  });\r\n};\r\n\r\ninterface InvestmentsTransactionData {\r\n  error: null;\r\n  investments_transactions: InvestmentsTransactionsGetResponse;\r\n}\r\n\r\nexport const transformInvestmentTransactionsData = (data: InvestmentsTransactionData) => {\r\n  const investmentTransactionsData = data.investments_transactions.investment_transactions!.sort(function (a,b) {\r\n    if (a.account_id > b.account_id) return 1;\r\n    return -1;\r\n  });\r\n  return investmentTransactionsData.map((investmentTransaction) => {\r\n    const security = data.investments_transactions.securities!.filter(\r\n      (sec) => sec.security_id === investmentTransaction.security_id\r\n    )[0];\r\n\r\n    const obj: DataItem = {\r\n      name: security.name!,\r\n      amount: investmentTransaction.amount,\r\n      date: investmentTransaction.date,\r\n    };\r\n    return obj;\r\n  });\r\n};\r\n\r\ninterface LiabilitiesDataResponse {\r\n  error: null;\r\n  liabilities: LiabilitiesGetResponse;\r\n}\r\n\r\nexport const transformLiabilitiesData = (data: LiabilitiesDataResponse) => {\r\n  const liabilitiesData = data.liabilities.liabilities;\r\n  //console.log(liabilitiesData)\r\n  //console.log(\"random\")\r\n  const credit = liabilitiesData.credit!.map((credit) => {\r\n    const account = data.liabilities.accounts.filter(\r\n      (acc) => acc.account_id === credit.account_id\r\n    )[0];\r\n    const obj: DataItem = {\r\n      name: account.name,\r\n      type: \"credit card\",\r\n      date: credit.last_payment_date ?? \"\",\r\n      amount: formatCurrency(\r\n        credit.last_payment_amount,\r\n        account.balances.iso_currency_code\r\n      ),\r\n    };\r\n    return obj;\r\n  });\r\n\r\n  const mortgages = liabilitiesData.mortgage?.map((mortgage) => {\r\n    const account = data.liabilities.accounts.filter(\r\n      (acc) => acc.account_id === mortgage.account_id\r\n    )[0];\r\n    const obj: DataItem = {\r\n      name: account.name,\r\n      type: \"mortgage\",\r\n      date: mortgage.last_payment_date!,\r\n      amount: formatCurrency(\r\n        mortgage.last_payment_amount!,\r\n        account.balances.iso_currency_code\r\n      ),\r\n    };\r\n    return obj;\r\n  });\r\n\r\n  const student = liabilitiesData.student?.map((student) => {\r\n    const account = data.liabilities.accounts.filter(\r\n      (acc) => acc.account_id === student.account_id\r\n    )[0];\r\n    const obj: DataItem = {\r\n      name: account.name,\r\n      type: \"student loan\",\r\n      date: student.last_payment_date!,\r\n      amount: formatCurrency(\r\n        student.last_payment_amount!,\r\n        account.balances.iso_currency_code\r\n      ),\r\n    };\r\n    return obj;\r\n  });\r\n\r\n  return credit!.concat(mortgages!).concat(student!);\r\n};\r\n\r\nexport const transformTransferData = (data: TransferGetResponse): Array<DataItem> => {\r\n  const transferData = data.transfer;\r\n  return [\r\n    {\r\n      transferId: transferData.id,\r\n      amount: transferData.amount,\r\n      type: transferData.type,\r\n      achClass: transferData.ach_class,\r\n      network: transferData.network,\r\n      status: transferData.status,\r\n    },\r\n  ];\r\n};\r\n\r\ninterface ItemData {\r\n  item: ItemGetResponse[\"item\"];\r\n  institution: InstitutionsGetByIdResponse[\"institution\"];\r\n}\r\n\r\nexport const transformItemData = (data: ItemData): Array<DataItem> => {\r\n  return [\r\n    {\r\n      name: data.institution.name,\r\n      billed: data.item.billed_products.join(\", \"),\r\n      available: data.item.available_products.join(\", \"),\r\n    },\r\n  ];\r\n};\r\n\r\nexport const transformAccountsData = (data: AccountsGetResponse) => {\r\n  const accountsData = data.accounts;\r\n  return accountsData.map((account) => {\r\n    const balance: number | null | undefined =\r\n      account.balances.available || account.balances.current;\r\n    const obj: DataItem = {\r\n      name: account.name,\r\n      balance: formatCurrency(balance, account.balances.iso_currency_code),\r\n      subtype: account.subtype,\r\n      mask: account.mask!,\r\n    };\r\n    return obj;\r\n  });\r\n};\r\n\r\ninterface PaymentData {\r\n  payment: PaymentInitiationPaymentGetResponse;\r\n}\r\n\r\nexport const transformPaymentData = (data: PaymentData) => {\r\n  const statusUpdate =\r\n    typeof data.payment.last_status_update === \"string\"\r\n      ? data.payment.last_status_update.replace(\"T\", \" \").replace(\"Z\", \"\")\r\n      : new Date(data.payment.last_status_update * 1000) // Java data comes as timestamp\r\n          .toISOString()\r\n          .replace(\"T\", \" \")\r\n          .replace(\"Z\", \"\");\r\n  return [\r\n    {\r\n      paymentId: data.payment.payment_id,\r\n      amount: `${data.payment.amount.currency} ${data.payment.amount.value}`,\r\n      status: data.payment.status,\r\n      statusUpdate: statusUpdate,\r\n      recipientId: data.payment.recipient_id,\r\n    },\r\n  ];\r\n};\r\n\r\ninterface AssetResponseData {\r\n  json: AssetReport;\r\n}\r\n\r\nexport const transformAssetsData = (data: AssetResponseData) => {\r\n  const assetItems = data.json.items;\r\n  return assetItems.flatMap((item) => {\r\n    return item.accounts.map((account) => {\r\n      const balance: number | null | undefined =\r\n        account.balances.available || account.balances.current;\r\n      const obj: DataItem = {\r\n        account: account.name,\r\n        balance: formatCurrency(balance, account.balances.iso_currency_code),\r\n        transactions: account.transactions!.length,\r\n        daysAvailable: account.days_available!,\r\n      };\r\n      return obj;\r\n    });\r\n  });\r\n};\r\n\r\ninterface IncomePaystub {\r\n  paystubs: IncomeVerificationPaystubsGetResponse,\r\n}\r\n\r\nexport const transformIncomePaystubsData = (data: IncomePaystub) => {\r\n  const paystubsItemsArray: Array<Paystub> = data.paystubs.paystubs\r\n  var finalArray: Array<IncomePaystubsDataItem> = []\r\n  for (var i = 0; i < paystubsItemsArray.length; i++){\r\n    var ActualEarningVariable: any = paystubsItemsArray[i].earnings\r\n    for (var j = 0; j < ActualEarningVariable.breakdown.length; j++){\r\n      var payStubItem: IncomePaystubsDataItem = {\r\n        description: paystubsItemsArray[i].employer.name + '_' + ActualEarningVariable.breakdown[j].description,\r\n        currentAmount: ActualEarningVariable.breakdown[j].current_amount,\r\n        currency: ActualEarningVariable.breakdown[j].iso_currency_code\r\n      }\r\n    finalArray.push(payStubItem)\r\n  }\r\n}\r\n  return finalArray\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
import React, { FocusEvent, ChangeEvent, KeyboardEvent } from 'react';
import cx from 'classnames';
import styles from './BaseInput.module.scss';
export interface InputProps {
    autoCapitalize?: string;
    autoComplete?: string;
    autoCorrect?: string;
    autoFocus?: boolean;
    children?: React.ReactNode;
    className?: Parameters<typeof cx>[0];
    codeType?: boolean;
    disabled?: boolean;
    errorMessage?: string;
    focused?: boolean;
    iconButtons?: React.ReactElement[];
    inputMode?: 'decimal' | 'email' | 'none' | 'numeric' | 'search' | 'tel' | 'text' | 'url';
    id: string;
    isDarkMode?: boolean;
    label: string;
    large?: boolean;
    maxLength?: number;
    minLength?: number;
    name?: string;
    note?: React.ReactNode;
    noteIcon?: React.ReactElement;
    noteId?: string;
    onBlur?: (event: FocusEvent<HTMLInputElement>) => void;
    onChange: (event: ChangeEvent<HTMLInputElement>) => void;
    onFocus?: (event: FocusEvent<HTMLInputElement>) => void;
    onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void;
    onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;
    pattern?: string;
    placeholder?: string;
    prefix?: (callbacks: {
        onFocus: () => void;
        onBlur: () => void;
    }) => React.ReactElement;
    readOnly?: boolean;
    ref?: any;
    required?: boolean;
    value?: string;
}
interface Props extends InputProps {
    type: string;
}
export declare const BaseInput: React.ForwardRefExoticComponent<Props>;
export default BaseInput;
export { styles };
//# sourceMappingURL=index.d.ts.map
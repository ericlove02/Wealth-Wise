{"version":3,"file":"index.js","sources":["../../src/BaseInput/index.tsx"],"sourcesContent":["import React, { FocusEvent, ChangeEvent, KeyboardEvent } from 'react';\nimport cx from 'classnames';\n\nimport styles from './BaseInput.module.scss';\n\nexport interface InputProps {\n  autoCapitalize?: string;\n  autoComplete?: string;\n  autoCorrect?: string;\n  autoFocus?: boolean;\n  children?: React.ReactNode;\n  className?: Parameters<typeof cx>[0];\n  codeType?: boolean;\n  disabled?: boolean;\n  errorMessage?: string;\n  focused?: boolean;\n  iconButtons?: React.ReactElement[];\n  inputMode?:\n    | 'decimal'\n    | 'email'\n    | 'none'\n    | 'numeric'\n    | 'search'\n    | 'tel'\n    | 'text'\n    | 'url';\n  id: string;\n  isDarkMode?: boolean;\n  label: string;\n  large?: boolean;\n  maxLength?: number;\n  minLength?: number;\n  name?: string;\n  note?: React.ReactNode;\n  noteIcon?: React.ReactElement;\n  noteId?: string;\n  onBlur?: (event: FocusEvent<HTMLInputElement>) => void;\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n  onFocus?: (event: FocusEvent<HTMLInputElement>) => void;\n  onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void;\n  onKeyPress?: (event: KeyboardEvent<HTMLInputElement>) => void;\n  pattern?: string;\n  placeholder?: string;\n  prefix?: (callbacks: {\n    onFocus: () => void;\n    onBlur: () => void;\n  }) => React.ReactElement;\n  readOnly?: boolean;\n  ref?: any;\n  required?: boolean;\n  value?: string;\n}\n\ninterface Props extends InputProps {\n  type: string;\n}\n\nexport const BaseInput: React.ForwardRefExoticComponent<\n  Props\n> = React.forwardRef(\n  (\n    {\n      autoCapitalize,\n      autoComplete,\n      autoCorrect,\n      autoFocus,\n      children,\n      className,\n      codeType,\n      disabled,\n      errorMessage,\n      focused,\n      iconButtons,\n      id,\n      inputMode,\n      isDarkMode,\n      label,\n      large,\n      maxLength,\n      minLength,\n      name,\n      note,\n      noteIcon,\n      noteId,\n      onBlur,\n      onChange,\n      onFocus,\n      onKeyDown,\n      onKeyPress,\n      pattern,\n      placeholder,\n      prefix,\n      readOnly,\n      required,\n      type,\n      value,\n    },\n    ref: any,\n  ) => {\n    const floatLabel = Boolean(value || errorMessage || focused || placeholder);\n    const invalid = Boolean(errorMessage);\n\n    return (\n      <fieldset\n        className={cx(\n          styles.container,\n          isDarkMode && styles.containerDark,\n          (disabled || readOnly) && styles.disabled,\n          large && styles.largeContainer,\n          readOnly && styles.readOnly,\n          prefix && styles.containerPrefixed,\n          className,\n        )}\n      >\n        <label\n          className={cx(\n            styles.label,\n            isDarkMode && styles.labelDark,\n            !floatLabel && large && styles.largeLabel,\n            floatLabel && [\n              styles.floatLabel,\n              isDarkMode && styles.floatLabelDark,\n            ],\n          )}\n          htmlFor={id}\n        >\n          {invalid ? errorMessage : label}\n        </label>\n        {prefix && (\n          <span className={styles.prefix}>\n            {prefix({ onFocus: () => null, onBlur: () => null })}\n          </span>\n        )}\n        <input\n          className={cx(\n            styles.input,\n            isDarkMode && styles.inputDark,\n            large && styles.largeInput,\n            invalid && styles.hasError,\n            codeType && styles.codeType,\n          )}\n          {...{\n            autoCapitalize,\n            autoComplete,\n            autoCorrect,\n            autoFocus,\n            disabled,\n            inputMode,\n            maxLength,\n            minLength,\n            name,\n            onBlur,\n            onChange,\n            onFocus,\n            onKeyDown,\n            onKeyPress,\n            pattern,\n            readOnly,\n            ref,\n            required,\n            type,\n            value,\n          }}\n          aria-describedby={(note || noteIcon) && (noteId || `${id}-note`)}\n          id={id}\n          placeholder={placeholder}\n          spellCheck='false'\n        />\n        {iconButtons && (\n          <div className={styles.iconButtonWrapper}>\n            {iconButtons.map((iconButton, i) =>\n              React.cloneElement(iconButton, {\n                className: styles.iconButton,\n                key: i,\n              }),\n            )}\n          </div>\n        )}\n        {(note || noteIcon) && (\n          <span id={noteId || `${id}-note`} className={styles.noteContainer}>\n            {noteIcon &&\n              React.cloneElement(noteIcon, {\n                className: cx(styles.noteIcon, noteIcon.props.className),\n              })}\n            {note && <div className={styles.note}>{note}</div>}\n          </span>\n        )}\n        {children}\n      </fieldset>\n    );\n  },\n);\n\nBaseInput.displayName = 'BaseInput';\nexport default BaseInput;\nexport { styles };\n"],"names":["BaseInput","React","forwardRef","_a","ref","autoCapitalize","autoComplete","autoCorrect","autoFocus","children","className","codeType","disabled","errorMessage","focused","iconButtons","id","inputMode","isDarkMode","label","large","maxLength","minLength","name","note","noteIcon","noteId","onBlur","onChange","onFocus","onKeyDown","onKeyPress","pattern","placeholder","prefix","readOnly","required","type","value","floatLabel","Boolean","invalid","cx","styles","container","containerDark","largeContainer","containerPrefixed","labelDark","largeLabel","floatLabelDark","htmlFor","input","inputDark","largeInput","hasError","spellCheck","iconButtonWrapper","map","iconButton","i","cloneElement","key","noteContainer","props","displayName"],"mappings":"qZAyDaA,UAETC,eAAMC,YACR,SACEC,EAoCAC,OAnCEC,mBACAC,iBACAC,gBACAC,cACAC,aACAC,cACAC,aACAC,aACAC,iBACAC,YACAC,gBACAC,OACAC,cACAC,eACAC,UACAC,UACAC,cACAC,cACAC,SACAC,SACAC,aACAC,WACAC,WACAC,aACAC,YACAC,cACAC,eACAC,YACAC,gBACAC,WACAC,aACAC,aACAC,SACAC,UAIIC,EAAaC,QAAQF,GAASzB,GAAgBC,GAAWmB,GACzDQ,EAAUD,QAAQ3B,GAExB,OACEZ,yCACES,UAAWgC,GACTC,4BAAOC,UACP1B,GAAcyB,4BAAOE,eACpBjC,GAAYuB,IAAaQ,4BAAO/B,SACjCQ,GAASuB,4BAAOG,eAChBX,GAAYQ,4BAAOR,SACnBD,GAAUS,4BAAOI,kBACjBrC,IAGFT,sCACES,UAAWgC,GACTC,4BAAOxB,MACPD,GAAcyB,4BAAOK,WACpBT,GAAcnB,GAASuB,4BAAOM,WAC/BV,GAAc,CACZI,4BAAOJ,WACPrB,GAAcyB,4BAAOO,iBAGzBC,QAASnC,GAERyB,EAAU5B,EAAeM,GAE3Be,GACCjC,qCAAMS,UAAWiC,4BAAOT,QACrBA,EAAO,CAAEL,QAAS,WAAM,OAAA,MAAMF,OAAQ,WAAM,OAAA,SAGjD1B,sDACES,UAAWgC,GACTC,4BAAOS,MACPlC,GAAcyB,4BAAOU,UACrBjC,GAASuB,4BAAOW,WAChBb,GAAWE,4BAAOY,SAClB5C,GAAYgC,4BAAOhC,WAEjB,CACFN,iBACAC,eACAC,cACAC,YACAI,WACAK,YACAI,YACAC,YACAC,OACAI,SACAC,WACAC,UACAC,YACAC,aACAC,UACAG,WACA/B,MACAgC,WACAC,OACAC,8BAEiBd,GAAQC,KAAcC,GAAaV,WACtDA,GAAIA,EACJiB,YAAaA,EACbuB,WAAW,WAEZzC,GACCd,oCAAKS,UAAWiC,4BAAOc,mBACpB1C,EAAY2C,KAAI,SAACC,EAAYC,GAC5B,OAAA3D,eAAM4D,aAAaF,EAAY,CAC7BjD,UAAWiC,4BAAOgB,WAClBG,IAAKF,SAKXpC,GAAQC,IACRxB,qCAAMe,GAAIU,GAAaV,UAAWN,UAAWiC,4BAAOoB,eACjDtC,GACCxB,eAAM4D,aAAapC,EAAU,CAC3Bf,UAAWgC,GAAGC,4BAAOlB,SAAUA,EAASuC,MAAMtD,aAEjDc,GAAQvB,oCAAKS,UAAWiC,4BAAOnB,MAAOA,IAG1Cf,MAMTT,UAAUiE,YAAc"}
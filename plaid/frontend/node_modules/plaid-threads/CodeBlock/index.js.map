{"version":3,"file":"index.js","sources":["../../src/CodeBlock/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport BookOpen from '../Icons/BookOpen';\nimport Checkmark from '../Icons/Checkmark';\nimport ChevronS2Down from '../Icons/ChevronS2Down';\nimport Copy from '../Icons/Copy';\nimport IconButton from '../IconButton';\nimport Dropdown, { DropdownItem } from '../Dropdown';\n\nimport styles from './CodeBlock.module.scss';\n\nexport interface Props {\n  children?: React.ReactNode;\n  className?: Parameters<typeof cx>[0];\n  code: string | null; // code can be null if children is passed\n  isCopying?: boolean;\n  wrap?: boolean;\n  onClick?: () => void;\n  title?: string;\n  dropdown?: {\n    isOpen: boolean;\n    onChange: (v: DropdownItem) => void;\n    onClick: () => void;\n    onEscape?: () => void;\n    options: Array<DropdownItem>;\n    text: string;\n    value: DropdownItem;\n  };\n  referenceLink?: {\n    href: string;\n    accessibilityLabel: string;\n  };\n}\n\nexport const CodeBlock: React.FC<Props> = ({\n  children,\n  className,\n  code,\n  dropdown,\n  isCopying,\n  wrap,\n  onClick,\n  title,\n  referenceLink,\n}) => (\n  <div className={cx(styles.wrapper, className)} role='group'>\n    {(title || onClick) && (\n      <div className={styles.header}>\n        <label className={styles.title}>{title}</label>\n        <div className={styles.buttonWrapper}>\n          {dropdown && (\n            <Dropdown\n              wrapperClassName={styles.dropdown}\n              isOpen={dropdown.isOpen}\n              options={dropdown.options}\n              onChange={dropdown.onChange}\n              onEscape={dropdown.onEscape}\n              value={dropdown.value}\n              target={\n                <IconButton\n                  className={styles.button}\n                  accessibilityLabel={`Select ${dropdown.text}`}\n                  onClick={dropdown.onClick}\n                  icon={\n                    <>\n                      <span className={styles.dropdownText}>\n                        {dropdown.text}\n                      </span>\n                      <ChevronS2Down />\n                    </>\n                  }\n                />\n              }\n            />\n          )}\n\n          {referenceLink && (\n            <IconButton\n              className={cx(styles.button, styles.buttonIcon)}\n              accessibilityLabel={referenceLink.accessibilityLabel}\n              href={referenceLink.href}\n              icon={\n                <span className={styles.iconWrapper}>\n                  <BookOpen />\n                </span>\n              }\n            />\n          )}\n          {onClick && (\n            <IconButton\n              className={cx(\n                styles.button,\n                styles.buttonIcon,\n                isCopying && styles.buttonActive,\n              )}\n              accessibilityLabel='Copy'\n              onClick={onClick}\n              icon={\n                <>\n                  <span className={styles.iconWrapper}>\n                    <Copy\n                      className={cx(\n                        styles.iconCopy,\n                        isCopying && styles.active,\n                      )}\n                    />\n                    <Checkmark\n                      className={cx(\n                        styles.iconCheckmark,\n                        isCopying && styles.active,\n                      )}\n                    />\n                  </span>\n                </>\n              }\n            />\n          )}\n        </div>\n      </div>\n    )}\n    <div className={styles.scrollContainer}>\n      {children != null ? (\n        children\n      ) : (\n        <pre className={cx(styles.pre, wrap ? styles.wrap : styles.noWrap)}>\n          <code className={cx(styles.code)}>{code}</code>\n        </pre>\n      )}\n    </div>\n  </div>\n);\n\nCodeBlock.displayName = 'CodeBlock';\nexport default CodeBlock;\nexport { styles };\n"],"names":["CodeBlock","_a","children","className","code","dropdown","isCopying","wrap","onClick","title","referenceLink","React","cx","styles","wrapper","role","header","buttonWrapper","Dropdown","wrapperClassName","isOpen","options","onChange","onEscape","value","target","IconButton","button","accessibilityLabel","text","icon","dropdownText","ChevronS2Down","buttonIcon","href","iconWrapper","BookOpen","buttonActive","Copy","iconCopy","active","Checkmark","iconCheckmark","scrollContainer","pre","noWrap","displayName"],"mappings":"gtBAmCaA,UAA6B,SAACC,OACzCC,aACAC,cACAC,SACAC,aACAC,cACAC,SACAC,YACAC,UACAC,kBACI,OACJC,oCAAKR,UAAWS,GAAGC,wBAAOC,QAASX,GAAYY,KAAK,UAChDN,GAASD,IACTG,oCAAKR,UAAWU,wBAAOG,QACrBL,sCAAOR,UAAWU,wBAAOJ,OAAQA,GACjCE,oCAAKR,UAAWU,wBAAOI,eACpBZ,GACCM,6BAACO,iBACCC,iBAAkBN,wBAAOR,SACzBe,OAAQf,EAASe,OACjBC,QAAShB,EAASgB,QAClBC,SAAUjB,EAASiB,SACnBC,SAAUlB,EAASkB,SACnBC,MAAOnB,EAASmB,MAChBC,OACEd,6BAACe,iBACCvB,UAAWU,wBAAOc,OAClBC,mBAAoB,UAAUvB,EAASwB,KACvCrB,QAASH,EAASG,QAClBsB,KACEnB,0DACEA,qCAAMR,UAAWU,wBAAOkB,cACrB1B,EAASwB,MAEZlB,6BAACqB,iCAQZtB,GACCC,6BAACe,iBACCvB,UAAWS,GAAGC,wBAAOc,OAAQd,wBAAOoB,YACpCL,mBAAoBlB,EAAckB,mBAClCM,KAAMxB,EAAcwB,KACpBJ,KACEnB,qCAAMR,UAAWU,wBAAOsB,aACtBxB,6BAACyB,0BAKR5B,GACCG,6BAACe,iBACCvB,UAAWS,GACTC,wBAAOc,OACPd,wBAAOoB,WACP3B,GAAaO,wBAAOwB,cAEtBT,mBAAmB,OACnBpB,QAASA,EACTsB,KACEnB,0DACEA,qCAAMR,UAAWU,wBAAOsB,aACtBxB,6BAAC2B,cACCnC,UAAWS,GACTC,wBAAO0B,SACPjC,GAAaO,wBAAO2B,UAGxB7B,6BAAC8B,mBACCtC,UAAWS,GACTC,wBAAO6B,cACPpC,GAAaO,wBAAO2B,gBAWxC7B,oCAAKR,UAAWU,wBAAO8B,iBACR,MAAZzC,IAGCS,oCAAKR,UAAWS,GAAGC,wBAAO+B,IAAKrC,EAAOM,wBAAON,KAAOM,wBAAOgC,SACzDlC,qCAAMR,UAAWS,GAAGC,wBAAOT,OAAQA,OAO7CJ,UAAU8C,YAAc"}
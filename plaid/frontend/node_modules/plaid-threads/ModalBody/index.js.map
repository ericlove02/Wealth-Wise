{"version":3,"file":"index.js","sources":["../../src/ModalBody/index.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\nimport styles from './ModalBody.module.scss';\nimport { IconButton } from '../IconButton';\nimport { Button } from '../Button';\nimport { InlineLink } from '../InlineLink';\nimport { LoadingSpinner } from '../LoadingSpinner';\nimport { CloseS1 } from '../Icons';\n\ninterface Props {\n  onClickCancel?: () => void;\n  onClickConfirm?: (arg: any) => void;\n  header?: string;\n  body?: string;\n  isLoading?: boolean;\n  img?: string;\n  closeTimeoutMS?: number;\n  confirmText?: string;\n  cancelText?: string;\n  children?: React.ReactNode;\n  imgClassName?: string;\n  className?: Parameters<typeof cx>[0];\n}\n\nexport const ModalBody: React.FC<Props> = props => (\n  <div className={cx(styles.modalbody, props.className)}>\n    <div className={styles.close}>\n      <IconButton\n        accessibilityLabel='Navigation'\n        icon={<CloseS1 />}\n        onClick={props.onClickCancel}\n      />\n    </div>\n    <div className={cx(props.isLoading && styles.loading)}>\n      {props.isLoading ? (\n        <LoadingSpinner />\n      ) : (\n        <header className={styles.header}>\n          {props.img ? (\n            <img\n              className={cx(styles.img, props.imgClassName)}\n              src={props.img}\n              alt=''\n            />\n          ) : (\n            <></>\n          )}\n          <h4 className={styles.heading}>{props.header}</h4>\n        </header>\n      )}\n\n      <p className={styles.body}>{props.body}</p>\n      {props.confirmText != null ? (\n        <Button wide className={styles.confirm} onClick={props.onClickConfirm}>\n          {props.confirmText}\n        </Button>\n      ) : null}\n      {props.cancelText != null ? (\n        <div className={styles.cancel}>\n          <InlineLink onClick={props.onClickCancel}>\n            {props.cancelText ? props.cancelText : 'Cancel'}\n          </InlineLink>\n        </div>\n      ) : null}\n    </div>\n  </div>\n);\n\nModalBody.displayName = 'ModalBody';\nexport default ModalBody;\nexport { styles };\n"],"names":["ModalBody","props","React","className","cx","styles","modalbody","close","IconButton","accessibilityLabel","icon","CloseS1","onClick","onClickCancel","isLoading","loading","LoadingSpinner","header","img","imgClassName","src","alt","heading","body","confirmText","Button","wide","confirm","onClickConfirm","cancelText","cancel","InlineLink","displayName"],"mappings":"w4MAyBaA,UAA6B,SAAAC,GAAS,OACjDC,oCAAKC,UAAWC,GAAGC,OAAOC,UAAWL,EAAME,YACzCD,oCAAKC,UAAWE,OAAOE,OACrBL,6BAACM,sBACCC,mBAAmB,aACnBC,KAAMR,6BAACS,sBACPC,QAASX,EAAMY,iBAGnBX,oCAAKC,UAAWC,GAAGH,EAAMa,WAAaT,OAAOU,UAC1Cd,EAAMa,UACLZ,6BAACc,6BAEDd,uCAAQC,UAAWE,OAAOY,QACvBhB,EAAMiB,IACLhB,oCACEC,UAAWC,GAAGC,OAAOa,IAAKjB,EAAMkB,cAChCC,IAAKnB,EAAMiB,IACXG,IAAI,KAGNnB,2DAEFA,mCAAIC,UAAWE,OAAOiB,SAAUrB,EAAMgB,SAI1Cf,kCAAGC,UAAWE,OAAOkB,MAAOtB,EAAMsB,MACZ,MAArBtB,EAAMuB,YACLtB,6BAACuB,gBAAOC,QAAKvB,UAAWE,OAAOsB,QAASf,QAASX,EAAM2B,gBACpD3B,EAAMuB,aAEP,KACiB,MAApBvB,EAAM4B,WACL3B,oCAAKC,UAAWE,OAAOyB,QACrB5B,6BAAC6B,oBAAWnB,QAASX,EAAMY,eACxBZ,EAAM4B,WAAa5B,EAAM4B,WAAa,WAGzC,QAKV7B,UAAUgC,YAAc"}
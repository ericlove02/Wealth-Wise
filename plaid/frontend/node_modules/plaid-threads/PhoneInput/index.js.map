{"version":3,"file":"index.js","sources":["../../src/constants.ts","../../src/PhoneInput/index.tsx"],"sourcesContent":["interface Country {\n  code: string;\n  name: string;\n  icon: string;\n  termsURL: string;\n  privacyPolicyURL: string;\n}\n\nconst LEGAL_URL = 'https://plaid.com/legal';\nconst PRIVACY_POLICY_URL = `${LEGAL_URL}#end-user-privacy-policy`;\n\nexport const SUPPORTED_COUNTRIES: Country[] = [\n  {\n    code: 'US',\n    name: 'United States',\n    icon: 'ðŸ‡ºðŸ‡¸',\n    termsURL: `${LEGAL_URL}/end-user-services-agreement`,\n    privacyPolicyURL: PRIVACY_POLICY_URL,\n  },\n  {\n    code: 'GB',\n    name: 'United Kingdom',\n    icon: 'ðŸ‡¬ðŸ‡§',\n    termsURL: `${LEGAL_URL}#end-user-services-agreement-uk`,\n    privacyPolicyURL: PRIVACY_POLICY_URL,\n  },\n];\n\nexport const DEFAULT_COUNTRY = SUPPORTED_COUNTRIES[0];\n\n// TODO: get rid of libphonenumber dependency\n// const defaultPhoneNumber = `+${getCountryCallingCode(DEFAULT_COUNTRY.code)}`;\nconst defaultPhoneNumber = `+1`;\n\nexport const DEFAULT_PHONE_NUMBER = {\n  readable: defaultPhoneNumber,\n  e164: defaultPhoneNumber,\n  valid: false,\n};\n","import React, { FunctionComponent } from 'react';\nimport cx from 'classnames';\n\nimport BaseInput, { InputProps } from '../BaseInput';\nimport inputStyles from '../BaseInput/BaseInput.module.scss';\nimport { SUPPORTED_COUNTRIES } from '../constants';\n\ninterface Props extends InputProps {\n  onCountryCodeChange?: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\n}\n\nexport const PhoneInput: FunctionComponent<Props> = props => (\n  <BaseInput\n    {...props}\n    type='tel'\n    prefix={({ onFocus, onBlur }) => (\n      // N.B. this is intentionally not a <Field> because we don't want the value\n      // in the form data, it is only used to set and reset the phoneNumber\n      // country code\n      <select\n        className={cx(\n          inputStyles.input,\n          inputStyles.select,\n          inputStyles['prefix-input'],\n        )}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={props.onCountryCodeChange}\n      >\n        {SUPPORTED_COUNTRIES.map(({ code, icon, name }) => (\n          <option key={code} value={code}>\n            +1\n            {/* TODO: remove libphonenumber depdendency\n            {icon} {name} (+{getCountryCallingCode(code)})\n              */}\n          </option>\n        ))}\n      </select>\n    )}\n  />\n);\n\nPhoneInput.displayName = 'PhoneInput';\nexport default PhoneInput;\n"],"names":["LEGAL_URL","PRIVACY_POLICY_URL","SUPPORTED_COUNTRIES","code","name","icon","termsURL","privacyPolicyURL","PhoneInput","props","React","BaseInput","type","prefix","_a","onFocus","onBlur","className","cx","inputStyles","input","select","onChange","onCountryCodeChange","map","key","value","displayName"],"mappings":"8bAQMA,UAAY,0BACZC,mBAAwBD,qCAEjBE,oBAAiC,CAC5C,CACEC,KAAM,KACNC,KAAM,gBACNC,KAAM,OACNC,SAAaN,yCACbO,iBAAkBN,oBAEpB,CACEE,KAAM,KACNC,KAAM,iBACNC,KAAM,OACNC,SAAaN,4CACbO,iBAAkBN,qBCbTO,WAAuC,SAAAC,GAAS,OAC3DC,6BAACC,mCACKF,GACJG,KAAK,MACLC,OAAQ,SAACC,OAAEC,YAASC,WAAa,OAI/BN,uCACEO,UAAWC,GACTC,4BAAYC,MACZD,4BAAYE,OACZF,4BAAY,iBAEdJ,QAASA,EACTC,OAAQA,EACRM,SAAUb,EAAMc,qBAEfrB,oBAAoBsB,KAAI,SAACV,OAAEX,uBAAuB,OACjDO,uCAAQe,IAAKtB,EAAMuB,MAAOvB,kBAYpCK,WAAWmB,YAAc"}
{"version":3,"file":"index.js","sources":["../../src/TextArea/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport cx from 'classnames';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport baseStyles from '../BaseInput/BaseInput.module.scss';\nimport styles from './TextArea.module.scss';\n\nexport interface Props {\n  className?: Parameters<typeof cx>[0];\n  errorMessage?: string;\n  id: string;\n  label: string;\n  focused?: boolean;\n  placeholder?: string;\n  readOnly?: boolean;\n  value?: string;\n  name?: string;\n  onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onFocus?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (event: React.FocusEvent<HTMLTextAreaElement>) => void;\n  required?: boolean;\n  ref?: any; // React doesnt expose a type for this\n  inputRef?: () => void;\n  minRows?: number;\n  maxRows?: number;\n  tooltip?: string;\n  isDarkMode?: boolean;\n}\n\nexport const TextArea: FunctionComponent<Props> = ({\n  className,\n  errorMessage,\n  id,\n  label,\n  focused,\n  name,\n  onChange,\n  onFocus,\n  onBlur,\n  placeholder,\n  readOnly,\n  required,\n  value,\n  ref,\n  inputRef,\n  minRows = 5,\n  maxRows,\n  tooltip,\n  isDarkMode,\n}) => {\n  const floatLabel = Boolean(value) || focused;\n  const invalid = Boolean(errorMessage);\n  return (\n    <fieldset\n      className={cx(\n        styles.container,\n        isDarkMode && styles.containerDark,\n        readOnly && baseStyles.readOnly,\n        className,\n      )}\n    >\n      <label\n        className={cx(\n          baseStyles.label,\n          isDarkMode && baseStyles.labelDark,\n          (floatLabel || placeholder) && [\n            baseStyles.floatLabel,\n            isDarkMode && baseStyles.floatLabelDark,\n          ],\n        )}\n        htmlFor={id}\n      >\n        {invalid ? errorMessage : label}\n      </label>\n      <TextareaAutosize\n        className={cx(\n          baseStyles.input,\n          styles.input,\n          isDarkMode && baseStyles.inputDark,\n          invalid && baseStyles.hasError,\n        )}\n        {...{\n          value,\n          name,\n          onChange,\n          onFocus,\n          onBlur,\n          readOnly,\n          required,\n          ref,\n          inputRef,\n          minRows,\n          maxRows,\n          placeholder,\n        }}\n        id={id}\n      />\n      {tooltip && <div className={cx(baseStyles.tooltip)}>{tooltip}</div>}\n    </fieldset>\n  );\n};\n\nTextArea.displayName = 'TextArea';\n\nexport default TextArea;\nexport { styles };\n"],"names":["TextArea","_a","className","errorMessage","id","label","focused","name","onChange","onFocus","onBlur","placeholder","readOnly","required","value","ref","inputRef","_b","minRows","maxRows","tooltip","isDarkMode","floatLabel","Boolean","invalid","React","cx","styles","container","containerDark","baseStyles","labelDark","floatLabelDark","htmlFor","TextareaAutosize","input","inputDark","hasError","displayName"],"mappings":"gzCA6BaA,SAAqC,SAACC,OACjDC,cACAC,iBACAC,OACAC,UACAC,YACAC,SACAC,aACAC,YACAC,WACAC,gBACAC,aACAC,aACAC,UACAC,QACAC,aACAC,YAAAC,iBACAC,YACAC,YACAC,eAEMC,EAAaC,QAAQT,IAAUR,EAC/BkB,EAAUD,QAAQpB,GACxB,OACEsB,yCACEvB,UAAWwB,GACTC,OAAOC,UACPP,GAAcM,OAAOE,cACrBjB,GAAYkB,4BAAWlB,SACvBV,IAGFuB,sCACEvB,UAAWwB,GACTI,4BAAWzB,MACXgB,GAAcS,4BAAWC,WACxBT,GAAcX,IAAgB,CAC7BmB,4BAAWR,WACXD,GAAcS,4BAAWE,iBAG7BC,QAAS7B,GAERoB,EAAUrB,EAAeE,GAE5BoB,6BAACS,kCACChC,UAAWwB,GACTI,4BAAWK,MACXR,OAAOQ,MACPd,GAAcS,4BAAWM,UACzBZ,GAAWM,4BAAWO,WAEpB,CACFvB,QACAP,OACAC,WACAC,UACAC,SACAE,WACAC,WACAE,MACAC,WACAE,UACAC,UACAR,gBAEFP,GAAIA,KAELgB,GAAWK,oCAAKvB,UAAWwB,GAAGI,4BAAWV,UAAWA,KAK3DpB,SAASsC,YAAc"}
{"version":3,"file":"criticalCss-c77a750b.js","sources":["../src/utils/criticalCss.ts"],"sourcesContent":["import * as componentStyles from './criticalCssImportMap';\n\ninterface WithInjectedGetCss {\n  _getCss: () => string;\n}\n\n/**\n * This util function should only be used by repos relying on server-side rendering (SSR) with\n * access to a post-build or distribution version of Threads. The type casting here is intentional.\n *\n * We inject a _getCss method to component stylesheets (see the `injectStyleFunctions` plugin in\n * rollup.config.js) to retrieve the post-build CSS output in order to allow repos that rely on\n * SSR (e.g. repos using NextJS) to extract post-build CSS as stylesheets and serve them from the\n * server. This is to primarily address any Flash of Unstyled Content (FOUC) issues that can come\n * with only using a dynamic load of the Threads library.\n *\n * TODO(aren): Improve upon this method by passing taking a `html` param so that we only return\n * the CSS for classnames.\n * TODO(aren): Include CSS from SCSS-only modules (e.g. Color)\n */\nexport function criticalCss(components?: string[]) {\n  const criticalStyles: Array<WithInjectedGetCss> = [];\n  // Ignore non-existant components and components that we don't have exported styles for\n  const filteredComponents =\n    components != null && components.length > 0\n      ? components.filter(component =>\n          Object.keys(componentStyles).includes(component),\n        )\n      : [];\n\n  if (filteredComponents.length > 0) {\n    filteredComponents.forEach(component => {\n      criticalStyles.push(componentStyles[component]);\n    });\n  } else {\n    // If no components were specified or if all components specified were invalid return CSS for\n    // every component\n    Object.keys(componentStyles).forEach(component => {\n      criticalStyles.push(componentStyles[component]);\n    });\n  }\n\n  // Return all critical CSS as a single string\n  return criticalStyles.map(styles => styles._getCss()).join('\\n');\n}\n"],"names":["criticalCss","components","criticalStyles","filteredComponents","length","filter","component","Object","keys","componentStyles","includes","forEach","push","map","styles","_getCss","join"],"mappings":"spEAoBgBA,YAAYC,GAC1B,IAAMC,EAA4C,GAE5CC,EACU,MAAdF,GAAsBA,EAAWG,OAAS,EACtCH,EAAWI,QAAO,SAAAC,GAChB,OAAAC,OAAOC,KAAKC,iBAAiBC,SAASJ,MAExC,GAeN,OAbIH,EAAmBC,OAAS,EAC9BD,EAAmBQ,SAAQ,SAAAL,GACzBJ,EAAeU,KAAKH,gBAAgBH,OAKtCC,OAAOC,KAAKC,iBAAiBE,SAAQ,SAAAL,GACnCJ,EAAeU,KAAKH,gBAAgBH,OAKjCJ,EAAeW,KAAI,SAAAC,GAAU,OAAAA,EAAOC,aAAWC,KAAK"}